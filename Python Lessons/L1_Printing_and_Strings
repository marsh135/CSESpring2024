{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Welcome to Google Colab!\n",
        "\n",
        "Hover over this box and press the \"+ Text\" button to add a text box.  Type your name in the text box."
      ],
      "metadata": {
        "id": "f_W0onDjYxnM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Google Colab is an online IDE (Integrated Development Environment) that runs on Google servers.  It can be used to process Python code (like the code below).\n",
        "\n",
        "Press the \"Play\" button next to the code below."
      ],
      "metadata": {
        "id": "LMVtpsIBYwUw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Welcome to Computer Science!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SZtZiSo1aiom",
        "outputId": "c5871c19-027f-4eb8-b479-e2e064bf4772"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to Computer Science!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Google Colab runs a *Jupiter Notebook* file, or a .ipynb (Interactive Python Notebook), which allows you to have text (for notes) and code together.  It's like a Google doc that you can run code in.\n",
        "\n",
        "\n",
        "Every file has an *extention* - the letters after the \".\" in a file name (like image.jpg) - the extention tells the computer which program to use to open it.  .HTMLs are opened in a web browser, PDFs are opened in a viewer, and etc.\n",
        "\n",
        "In Python, there are two main file types:\n",
        "\n",
        "*   .py -  A standalone python file - it will open in either an IDE or the terminal\n",
        "*   .ipynb - Interactive Python Notebook, or Jupiter Notebook\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Feel free to make this your own - add notes where you need to, expand on the notes I have given you.\n",
        "\n",
        "Over time, I will give you less and less in these-  YOu will need to add your own notes and code snippets.\n",
        "\n",
        "You should save these in your drive, as these will be great references for you in Python."
      ],
      "metadata": {
        "id": "s-JTBPXYcT57"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Excellent - you just ran your first Python app.  Let's try to write something that will print your name.\n",
        "\n",
        "To do this, we are going to need two things - first, the print function.\n",
        "\n",
        "Type print() [must be all lower case!] to call the print function.  \n",
        "\n",
        "Next, you need an argument, or something that goes between the parenthesis in the print function.\n",
        "\n",
        "Let's try this with your name.  Type print(Your Name) in a new code block and try to run it"
      ],
      "metadata": {
        "id": "9lvksLxWa-sZ"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "fsghDLqZeehv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "When that compiled, you should have received a syntax error - this means that you mistyped something, or that what you typed was invalid.\n",
        "\n",
        "In this case, we brooke syntax rules.  When we use the print() function, it can print either a *variable* or a *string literal*.  \n",
        "\n",
        "Let's talk a bit about data.  Data ina  computer program can be one of a few different types. Some examples are below:\n",
        "\n",
        "\n",
        "*   Boolean - true or false, 0 or 1\n",
        "*   Integer - a whole number, positive or negative\n",
        "*   Float - floating point integer - that is, a numer with a decimal point\n",
        "*   Sting Literal (string) -  text and/or characters, not of numerical value.  That is, the word \"one\", not the value \"1\"\n",
        "\n",
        "In order to print a string, you have to put the text in side of quotations.\n",
        "\n",
        "Example:\n",
        "\n",
        "print(\"Your name\")\n",
        "\n",
        "Try that in a new code block\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "YUAAhiptefUm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "There are three code snippets ahead - fix the errors in each to make them *compile*"
      ],
      "metadata": {
        "id": "uuqqDBAL3nFn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(You need quotations to print strings)"
      ],
      "metadata": {
        "id": "ZGlsgqgd3z-D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Print(\"Capitalizations are very important in syntax - an accidental capitalization will break your program\")"
      ],
      "metadata": {
        "id": "7iqwPKLw34iP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pirnt(\"Spelling errors and missing quotes and parentheses will also break your code"
      ],
      "metadata": {
        "id": "4khw3QFM4DG_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's make things a bit more interactive\n",
        "\n",
        "In this program, we will ask a user to input their name.  We will store that name as a *variable*.\n",
        "\n",
        "Think about it like this: in math, if I were to give you the following:\n",
        "\n",
        "2x + 1 = 5   - solve for x\n",
        "\n",
        "You could do this, and you realize that *x* in this case is a placeholder for some value.  This is the concept of a variable - it is a named element in code that holds some value.\n",
        "\n",
        "For example, we may create a *variable* called userName (notice the capitalization on the N in userName - we call this camel case).  That variable is oging to hold some information, specifically, the user's name.  \n",
        "\n",
        "In a new box below, answer the following question:\n",
        "\n",
        "What type of data (boolean, int, float, or string) would the data stored in userName be?\n"
      ],
      "metadata": {
        "id": "N8Naj5cA4Cgm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ANSWER:**"
      ],
      "metadata": {
        "id": "PYdDicO_5Qdm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Type the following:\n",
        "\n",
        "userName = putYourNameHere\n",
        "print(\"Hello\" + userName +\"!\")\n",
        "\n",
        "Run your program and see if it works.  If it doesn't work, check your syntax, speeling, capitalization, etc.  This code should work - please do not copy/paste it"
      ],
      "metadata": {
        "id": "tiQH6H3s5SkP"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "aeZL5Tgy52m7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "It should have printed out  \"HelloName!\"  all scrunched together.  What we have done here is put two strings together and printed it back out.  We call this \"string concatenation\".\n",
        "\n",
        "There are many ways to do this in Python, but using commas (,) and spaces inside of quotations will give us space between strings.  \n",
        "\n",
        "For example, copy your code from above, but add a space between the \"o\" in \"Hello\" and the following quotation.  It should look like this:\n",
        "\n",
        "print(\"Hello \" + userName + \"!\")\n",
        "\n",
        "Notice, we do not want to do this between userName and the \"!\", as we want the \"!\" right nixt to the last character is the user name.\n",
        "\n",
        "Give it a try below:"
      ],
      "metadata": {
        "id": "A4x5e2aY529F"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "HNs-VmnV6jet"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can also use commas in between strings - the comma tells Python to put a space between the strings.\n",
        "\n",
        "Look at the code below:\n",
        "\n",
        "print(\"Hello\",userName, \"!\")"
      ],
      "metadata": {
        "id": "uFt7acoa6j6c"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y1NfQPtX6wc8",
        "outputId": "67f35751-0616-4357-d645-fd77ed0b1633"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello Kyle !\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Notice two things -\n",
        "First, the variable userName still has your name in it - we do not have to keep creating it or updating it - as long as you give it some value when create (also called *instantiate*)  the variable, it will hold that information.  If I were to run the code below:\n",
        "\n",
        "userName = \"Penn Student\"\n",
        "\n",
        "That would update the value of that variable\n",
        "\n",
        "In the code box below, run the update to the userName, then print it out using some form of string concatenation."
      ],
      "metadata": {
        "id": "S6OS21Xl6zE0"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uIoI4XIs7R0c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "In our example, to keep the spacing in our strings correct, we would need to run one of the following two examples.\n",
        "\n",
        "Example 1:\n",
        "print(\"Hello\", userName +\"!\")\n",
        "\n",
        "--OR--\n",
        "\n",
        "Example 2:\n",
        "\n",
        "print(\"Hello \" + userName + \"!\")\n",
        "\n",
        "Run both of these in the code block below - are the outputs the same?"
      ],
      "metadata": {
        "id": "We2VcY309lq6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cool!\n",
        "\n",
        "Now, lets try some other string features!\n",
        "\n",
        "Run this code in a code block below:\n",
        "\n",
        "print(userName.upper())"
      ],
      "metadata": {
        "id": "yzr7BuGa-FOY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(userName.upper())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8NQARmaA-cEm",
        "outputId": "7b6b3796-3074-443f-d458-7390b1eb229c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PENN STUDENT\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here, since we are not *concatenating* anything to userName, we do not have to put it in quotes-  Python can print the contents of the variable without need to put it in quotes - this is because userName is already a string.  We can confirm this by running the following code:\n",
        "\n",
        "print(type(userName))"
      ],
      "metadata": {
        "id": "p9z4Lg3s-maV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "What did the .upper() do?\n",
        "\n",
        "Run the program again, but make the text all lower case - How do you think you can do this?"
      ],
      "metadata": {
        "id": "JnngUTMX_CW4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Run the following:\n",
        "\n",
        "print(username.strip())"
      ],
      "metadata": {
        "id": "KCquLzN__LNb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(userName.strip())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ebtkq_Et_QN3",
        "outputId": "919624db-2b59-4c07-b84b-fe5b1e789384"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Penn Student\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This doesn't appear to have done much, but it removes spaces from before and after words - this is great for *data validation*.  We will touch on this in the future.\n",
        "\n",
        "Let's look at the strip function:"
      ],
      "metadata": {
        "id": "LdMOUHfT_ndQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sampleText = \"   There are three spaces before and after   \"\n",
        "\n",
        "print(\"This is the normal text:\")\n",
        "print(sampleText)\n",
        "print() # a blank print() statement will give us some space\n",
        "#anything following a hashtag is a comment - python will ignore it\n",
        "print(\"Upper Function result:\")\n",
        "print(sampleText.upper())\n",
        "print()\n",
        "print(\"Lower Function result:\")\n",
        "print(sampleText.lower())\n",
        "print()\n",
        "print(\"Strip Function result:\")\n",
        "print(sampleText.strip())\n",
        "print(\"Notice the spaces have been removed\")\n",
        "print()\n",
        "print(\"Upper AND Strip Function Result:\")\n",
        "print(sampleText.upper().strip())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VaOlB549_2gr",
        "outputId": "7f9c45a7-ed43-4ea5-878e-3e5ab7985f81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is the normal text:\n",
            "   There are three spaces before and after   \n",
            "\n",
            "Upper Function result:\n",
            "   THERE ARE THREE SPACES BEFORE AND AFTER   \n",
            "\n",
            "Lower Function result:\n",
            "   there are three spaces before and after   \n",
            "\n",
            "Strip Function result:\n",
            "There are three spaces before and after\n",
            "notice the spaces have been removed\n",
            "\n",
            "Upper AND Strip Function Result:\n",
            "THERE ARE THREE SPACES BEFORE AND AFTER\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In upper(), the opening and closing parentheses indicate that the code is a **function**, or a piece of code that does something to something else *when called*.  \n",
        "\n",
        "For example, if I gave you two numbers, say 4 and 5, those numbers are just hanging out, and you have nothing to do to/with them.  \n",
        "\n",
        "Now, if I tell you to *add* them, I gave you a *function* - that is, I gave you information and asked you to do something with them.  Once you do what I ask, you will have a new value, in this case, 9 - your will return that information back to us.\n",
        "\n",
        "In our .upper() example. we are *calling* the .upper() function, which checks all characters in a string.  If they are upper case already, it ignores them - if they are lowercase, it changes them to uppercase and stores them.  Once it hits the end of the word, it **returns** the information.\n",
        "\n",
        "Remember our Execution Cycle - Fetch, Decode, Execute, Store, Repeat"
      ],
      "metadata": {
        "id": "STSS_JvoAroo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We have learned a lot today - use the new information you have to create a program that does something with strings and inputs.\n",
        "\n",
        "Next time, we will look at working with bools, ints, and floats"
      ],
      "metadata": {
        "id": "5O8aRWy3Bzxx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Coding Challenge:\n",
        "\n",
        "Use the print statement to output a joke that appears on multiple lines. The answer should be in all caps.\n",
        "\n",
        "Create a new code block below and write your code."
      ],
      "metadata": {
        "id": "Ckz8r9xARZ3Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Variables**\n",
        "\n",
        "\n",
        "*   A placeholder for information\n",
        "*   Can store one piece of information\n",
        "*   Can be called whatever you would like (name should be relevant)\n",
        "*   No spaces in the name\n",
        "*   Should start with a  lower case character\n",
        "*   Name must be unique to each variable\n",
        "\n",
        "Look at the example below:"
      ],
      "metadata": {
        "id": "tlGLdAhfa1uC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "favColor = \"green\"\n",
        "favColor = \"blue\"\n",
        "\n",
        "print(\"The color stored in favColor is\" , favColor +\".\")"
      ],
      "metadata": {
        "id": "Xkg3wn3SbEUR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "How can we change the program to still store \"blue\" in a variable, but also store a user's favorite color?\n",
        "\n",
        "\n",
        "Write that code below:"
      ],
      "metadata": {
        "id": "GnCH64QRbWA4"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ycTLc-YAbW9R"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Another helpful and good habit to get in is adding *comments* to your programs.\n",
        "\n",
        "Comments start with a \"#\", and give clarity to the intention of the program.  \n",
        "\n",
        "See Below:"
      ],
      "metadata": {
        "id": "aQ01xJcbbYnU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a variable that stores your name\n",
        "\n",
        "#replace this with the code\n",
        "\n",
        "#print hello and the variable\n",
        "print(\"Hello\", userName +\"!\")"
      ],
      "metadata": {
        "id": "VSMm1w7ibbrD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write a program below that has two variables, called name1 and name2. You can assign the names rather than asking for user input.\n",
        "\n",
        "Once you have that, write a print statement that *concatenates* the variables together\n",
        "\n",
        "**Programming Challenge**\n",
        "\n",
        "Write a program that:\n",
        "\n",
        "\n",
        "*   Has two variables that store your favorite foods\n",
        "*   Outputs the contents of the variables on two separate lines.\n",
        "\n",
        "Once you complete that:\n",
        "\n",
        "\n",
        "*   Add another varaibel with your me.\n",
        "*   Output with two lines. The first lins should display your name.  The second should display both of your favorite foods.\n",
        "\n",
        "If you get that done, try to get it all on one line so that it reads *My name is ___ and my favorite foods are ___ and ___.*\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ycPIqqIfbdoP"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NWH9ix5abiaI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Input**\n",
        "\n",
        "A key piece of computer programming is *input*, or data that is collected and sent to the computer.\n",
        "\n",
        "A prgram will typically take some *input*, *process* that input, and *output* that processed information.\n",
        "\n",
        "Lets take a look at an example: (add comments to predict what the code will do)"
      ],
      "metadata": {
        "id": "pHi8LrhRbi3M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hi! What is your name? \")\n",
        "\n",
        "name = \"John\"\n",
        "\n",
        "print(\"Hi, \" + name + \"!  How are you today?\")"
      ],
      "metadata": {
        "id": "4EUVAF9Xboxx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "So this works, but only for users named \"John\".\n",
        "\n",
        "Let's modify this program to ask for a user's name, then outputs the same string, but with their name"
      ],
      "metadata": {
        "id": "MgJA8jkhbq86"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hi! What is your name? \")\n",
        "\n",
        "#we need to change the next line\n",
        "name = input()\n",
        "\n",
        "print(\"Hi, \" + name + \"!  How are you today?\")"
      ],
      "metadata": {
        "id": "_zlvZLYNbsvv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's add another question, variable, and output to this program:"
      ],
      "metadata": {
        "id": "Afl631QBbzWi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hi! What is your name? \")\n",
        "\n",
        "name = input()\n",
        "\n",
        "print(\"Hi, \" + name + \"!  How are you today?\")\n",
        "\n",
        "#store their answer\n",
        "\n",
        "\n",
        "#print their answer\n",
        "print(\"I am glad that you are \" + answer + \".\")"
      ],
      "metadata": {
        "id": "cLM0aZJhb2XY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "What is a limitation to the program above?"
      ],
      "metadata": {
        "id": "P07my4iTb9RS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "ANSWER:"
      ],
      "metadata": {
        "id": "WjMi99d7b_2v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "** Programming Challenge - ChatBot **\n",
        "\n",
        "Write a program that:\n",
        "\n",
        "\n",
        "*   Asks the user for their name and stores it in a variable\n",
        "*   Greets the user by name\n",
        "*   Asks three different questions about themselves and stores thei responses in three different variables\n",
        "*   Respond to each of the questions one by one, using the user's name in the respsonse\n",
        "*   Output a summary of all the user's answers in a singel sentence"
      ],
      "metadata": {
        "id": "IKTMPcRncBc_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#write your code here"
      ],
      "metadata": {
        "id": "08eJ39g7cEJr"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
